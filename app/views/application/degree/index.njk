{% extends "_form.njk" %}

{% set action = "edit" if applicationValue(["degree", id, "type"]) else "add" %}
{% set degreeCount = applicationValue(["degree"]) | length %}
{% if degreeCount >= 1 and action == "add" %}
  {% set title = (action | capitalize) + " another degree" %}
  {% set degreeTypes = degree.types.all %}
{% else %}
  {% set title = (action | capitalize) + " undergraduate degree" %}
  {% set degreeTypes = degree.types.undergraduate %}
{% endif %}

{% if degreeCount < 1 and action == "add" %}
  {% set internationalTypeHintText = "For example, BA, BSc or other (please specify)" %}
{% else %}
  {% set internationalTypeHintText = "For example, BA, BSc, Masters, PhD, or other (please specify)" %}
{% endif %}

{% block pageNavigation %}
  {% if referrer %}
    {{ govukBackLink({
      href: referrer })
    }}
  {% else %}
    {{ govukBackLink({
      href: "/application/" + applicationId,
      text: "Back to application"
    }) }}
  {% endif %}
{% endblock %}

{% block primary %}
  {% if data.flags.international_qualifications %}
    {% set ukConditionalHtml %}
      {{ appAutocomplete({
        label: {
          text: "Type of degree"
        },
        items: degreeTypes
      } | decorateApplicationAttributes(["degree", id, "type-uk"])) }}
    {% endset %}

    {% set internationalConditionalHtml %}
      {{ govukInput({
        label: {
          text: "Type of qualification"
        },
        hint: {
          text: internationalTypeHintText
        }
      } | decorateApplicationAttributes(["degree", id, "type-nonuk"])) }}

      {{ appAutocomplete({
        label: {
          text: "In which country is your institution based?"
        },
        items: countries
      } | decorateApplicationAttributes(["degree", id, "country"])) }}
    {% endset %}

    {{ govukRadios({
      fieldset: {
        legend: {
          text: "What type of degree do you want to add?",
          classes: "govuk-label--m"
        }
      },
      hint: {
        text: "You need an undergraduate to apply for teacher training. If you have further degrees, you can add them after."
      } if degreeCount < 1,
      items: [{
        value: "domestic",
        text: "UK degree",
        conditional: {
          html: ukConditionalHtml
        }
      }, {
        value: "international",
        text: "Non-UK degree",
        conditional: {
          html: internationalConditionalHtml
        }
      }]
    } | decorateApplicationAttributes(["degree", id, "provenance"])) }}
  {% else %}
    {{ appAutocomplete({
      label: {
        text: "What type of degree do you want to add?",
        classes: "govuk-label--m"
      },
      hint: {
        text: "You need an undergraduate to apply for teacher training. If you have further degrees, you can add them after."
      } if degreeCount < 1,
      items: degreeTypes
    } | decorateApplicationAttributes(["degree", id, "type-uk"])) }}
  {% endif %}

  {{ govukButton({
    text: "Save and continue"
  }) }}
{% endblock %}

{% block pageScripts %}
  <script src="/public/javascripts/autocomplete.min.js"></script>
  <script>
  {% if data.flags.international_qualifications %}
    accessibleAutocomplete.enhanceSelectElement({
      defaultValue: '{{ applicationValue(["degree", id, "country"]) }}',
      selectElement: document.querySelector('#degree-{{ id }}-country')
    })
  {% endif %}
    function inputTemplate (result) {
      if (result) {
        const name = result.split(' - ')

        if (name[1]) {
          return name[0] && name[0]
        }

        return result && result
      }

      return result && result
    }

    function suggestionTemplate (result) {
      const name = result.split(' - ')

      if (name[1]) {
        return name[0] && `<strong>${name[0]}</strong> <span class="autocomplete__option--hint">${name[1]}</span>`
      }

      return result && `<strong>${result}</strong>`
    }

    accessibleAutocomplete.enhanceSelectElement({
      defaultValue: '{{ applicationValue(["degree", id, "type-uk"]) }}',
      selectElement: document.querySelector('#degree-{{ id }}-type-uk'),
      showAllValues: true,
      templates: {
        inputValue: inputTemplate,
        suggestion: suggestionTemplate
      }
    })
  </script>
{% endblock %}
