{% extends "_form.njk" %}

{% set action = "edit" if applicationValue(["degree", id, "type"]) else "add" %}
{% set degreeCount = applicationValue(["degree"]) | length %}
{% if degreeCount >= 1 and action == "add" %}
  {% set title = (action | capitalize) + " another degree" %}
  {% set degreeTypes = degree.types.all %}
{% else %}
  {% set title = (action | capitalize) + " degree or equivalent" %}
  {% set degreeTypes = degree.types.undergraduate %}
{% endif %}
{% set allowsFeedback = true %}

{% if degreeCount < 1 and action == "add" %}
  {% set ukHintText = "For example, BA, BSc or other (please specify)" %}
{% else %}
  {% set ukHintText = "For example, BA, BSc, Masters, PhD, or other (please specify)" %}
{% endif %}
{% set intHintHtml = "For example, Bachelor degree, Bachelor of Arts, <span lang=\"fr\">Dipl√¥me</span>, <span lang=\"es\">Licenciatura</span>" %}

{% block pageNavigation %}
  {% if referrer %}
    {{ govukBackLink({
      href: referrer })
    }}
  {% else %}
    {{ govukBackLink({
      href: "/application/" + applicationId,
      text: "Back to application"
    }) }}
  {% endif %}
{% endblock %}

{% block primary %}
  {% if degreeCount < 1 %}
    <p class="govuk-body">You need an undergraduate degree or an equivalent to apply for teacher training. If you have further degrees, you can add them after.</p>
  {% endif %}

  {% set ukConditionalHtml %}
    <div class="govuk-form-group">
      <label class="govuk-label" for="degree-{{ id }}-typeUk">Enter degree type</label>
      <span id="degree-{{ id }}-typeUk-hint" class="govuk-hint">{{ ukHintText }}</span>
      <div id="type-uk-autocomplete-container"></div>
    </div>
  {% endset %}

  {% set internationalConditionalHtml %}
    {{ govukInput({
      label: {
        text: "Type of qualification"
      },
      hint: {
        html: intHintHtml
      }
    } | decorateApplicationAttributes(["degree", id, "typeNonUk"])) }}
  {% endset %}

  {% set equivalentHtml %}
    {{ govukTextarea({
      label: {
        text: "Describe your qualification equivalent to a degree"
      },
      hint: {
        html: "Any equivalent qualification must be one single qualification, not an aggregation of a number of separate qualifications. Providers will assess whether your qualification is equivalent to a degree or not."
      }
    } | decorateApplicationAttributes(["degree", id, "typeNonUk"])) }}
  {% endset %}

  {{ govukRadios({
    fieldset: {
      legend: {
        text: "What type of qualification do you want to add?",
        classes: "govuk-label--m"
      }
    },
    items: [
    {
      value: "domestic",
      text: "Degree from the UK",
      conditional: {
        html: ukConditionalHtml
      }
    },
    {
      value: "international",
      text: "Degree from another country",
      conditional: {
        html: internationalConditionalHtml
      }
    },
    {
      divider: "or"
    },
    {
      value: "equivalent",
      text: "A qualification equivalent to a degree",
      conditional: {
        html: equivalentHtml
      }
    }
    ]
  } | decorateApplicationAttributes(["degree", id, "provenance"])) }}

  {{ govukButton({
    text: "Save and continue"
  }) }}
{% endblock %}

{% block pageScripts %}
  <script src="/public/javascripts/autocomplete.min.js"></script>
  <script>
    function inputTemplate (result) {
      if (result) {
        const name = result.split(' - ')

        if (name[1]) {
          return name[0] && name[0]
        }

        return result && result
      }

      return result && result
    }

    function suggestionTemplate (result) {
      const name = result.split(' - ')

      if (name[1]) {
        return name[0] && `<strong>${name[0]}</strong> <span class="autocomplete__option--hint">${name[1]}</span>`
      }

      return result && `<strong>${result}</strong>`
    }

    accessibleAutocomplete({
      element: document.querySelector('#type-uk-autocomplete-container'),
      id: 'degree-{{ id }}-typeUk',
      name: "applications[{{ applicationId }}][degree][{{ id }}][typeUk]",
      defaultValue: '{{ applicationValue(["degree", id, "typeUk"]) }}',
      placeholder: false,
      showNoOptionsFound: false,
      source: [
        {% for item in degreeTypes %}"{{ item.text }}",{% endfor %}
      ],
      templates: {
        inputValue: inputTemplate,
        suggestion: suggestionTemplate
      }
    })
  </script>
{% endblock %}
